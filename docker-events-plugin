#!/usr/bin/env bash

set -eu
set -o pipefail

DOCKER_PATH=${DOCKER_PATH:-docker}
VERSION="0.3.0"
DEBUG=""
RECONNECT=1
PLUGIN=""

usage() {
cat <<DATA
Usage: docker-event-plugin [OPTION...] PLUGIN [PLUGIN_OPTION...]

PLUGIN:
  plugin file or directory

OPTION:
  -d, --debug         Debug mode
      --no-reconnect  Do not automatically reconnect on failure
      --help          Show help
  -v, --version       Show version

PLUGIN_OPTION:
  Passed to plugin

DATA
exit 0
}

version() {
  echo "$VERSION"
  exit 0
}

abort() {
  echo "$1" >&2
  exit 1
}

log() {
  local message=$1
  shift
  printf "$message\n" "$@"
}

handler() { :; }

call_plugin() {
  local event=$1
  shift

  [[ $DEBUG ]] && log "%-14s %s" "$event" "$*"
  set +u
  handler "$event" "$@"
  set -u
}

docker_version() {
  local version
  version=$("$DOCKER_PATH" --version)
  version=${version%%,*}
  version=${version##* }
  echo $version
}

requires() {
  local version
  version=$(printf "%s\n%s" "$DOCKER_CLIENT_VERSION" "$1" | sort -V | head -n1)
  [[ $1 = "$version" ]]
}

# docker events format
#
# * 0.10.0 and before
# too old
#
# * 0.11.0, 0.12.0, 1.0.0, 1.1.0
# [2016-02-06 22:27:07 +0000 UTC] d9e47054fcd14939f9551376aa946211e000b7c0a64e3e1bc99d59e8a6e0e941: (from busybox) create
#
# * 1.2.0
# 2016-02-06T22:30:31Z ab688e90049813788ae5f8b37cfbbe1a5520bdd8a6763216e8b7ed6a4a63e43c: (from busybox) create
#
# * 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0, 1.8.0
# 2016-02-06T22:31:02.000000000Z 70f21768aa1e6a1de4fb9d820572591be79766c9c2e1b551d6078ca0d013a045: (from busybox) create
#
# * 1.9.0
# 2016-02-06T22:33:31.258407546Z 95a609447654ce7bcc261bcf30a3b125e434b6a21f6adb4bd985a885359deb63: (from busybox) create
#
# * 1.10.0
# 2016-02-06T22:35:09.383073972Z container create b5a343f8111a73669624f541cfec7405aaf2547e809c0b6c850cacb962286743 (image=busybox, name=lonely_lovelace)

parser1.2.0() {
  local fields
  read -ra fields <<<"$1"

  if (( ${#fields[@]} == 3 )); then
    # images events:
    #   delete, import, pull, push, tag, untag
    #
    # event format: DATETIME IMAGE: EVENT
    # call plugin: "image" event image datetime
    call_plugin "image" "${fields[2]}" "${fields[1]:0:-1}" "${fields[0]}"
    return 0
  fi

  if (( ${#fields[@]} == 5 )); then
    # containers events:
    #   archive-path, attach, commit, copy, create, destroy, die,
    #   export, extract-to-dir, kill, oom, pause, rename, resize,
    #   restart, start, stop, top, unpause
    #
    # event format: DATETIME CONTAINER: (from IMAGE) EVENT
    # call plugin: "container" event container datetime
    call_plugin "container" "${fields[4]}" "${fields[1]:0:-1}" "${fields[0]}"
    return 0
  fi

  if (( ${#fields[@]} >= 6 )); then
    # containers events:
    #   exec_create, exec_start
    #
    # event format: DATETIME CONTAINER: (from IMAGE) EVENT: COMMAND
    # call plugin: "container" event container datetime command
    call_plugin "container" "${fields[4]:0:-1}" "${fields[1]:0:-1}" "${fields[0]}" "${fields[*]:5}"
    return 0
  fi
}

parser1.10.0() {
  local fields="${1% (*}"
  read -ra fields <<<"$fields"

  if [[ ${fields[2]} = *: ]]; then
    # event format: DATETIME TYPE EVENT: COMMAND ID (name=value, ...)
    # call plugin: type event id datetime command
    local rest=${fields[*]:3}
    call_plugin "${fields[1]}" "${fields[2]:0:-1}" "${rest##* }" "${rest% *}"
  else
    # event format: DATETIME TYPE EVENT ID (name=value, ...)
    # call plugin: type event id datetime
    call_plugin "${fields[1]}" "${fields[2]}" "${fields[3]}" "${fields[0]}"
  fi
}


main() {
  "$DOCKER_PATH" ps --no-trunc | tail -n +2 | while read -r id _; do
    call_plugin "container" "exists" "$id"
  done

  (( $? )) && return $?

  "$DOCKER_PATH" events | while read -r fields; do
    "$PARSER" "$fields"
  done
}

DOCKER_CLIENT_VERSION=$(docker_version)

while (($# > 0)); do
  case $1 in
    -d | --debug)        DEBUG=1 ;;
         --no-reconnect) RECONNECT="" ;;
         --help)         usage ;;
    -v | --version)      version ;;
    -*) abort "No such option" ;;
    *) break ;;
  esac
  shift
done

if (($# == 0)); then
  log "Not Specify the plugin"
else
  [[ -d $1 ]] && PLUGIN="$1/handler" || PLUGIN=$1
  shift
  [[ -f "$PLUGIN" ]] || abort "Plugin not found"
  PLUGIN=$(readlink -f "$PLUGIN")
  cd "${PLUGIN%/*}"
  set +u
  . "$PLUGIN"
  set -u
fi

log "Docker client version $DOCKER_CLIENT_VERSION"

if requires "1.10.0"; then
  PARSER="parser1.10.0"
elif requires "1.2.0"; then
  PARSER="parser1.2.0"
else
  abort "docker client $DOCKER_CLIENT_VERSION is too old"
fi

while true; do
  log "Connectiong to docker"
  main ||:
  log "Disconnected from docker"
  [[ $RECONNECT ]] || exit 1
  log "Waiting for connecting to docker..."
  sleep 5
done
